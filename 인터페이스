import tensorflow as tf
from tensorflow.keras.models import load_model
from mtcnn import MTCNN
import numpy as np
import os
import glob

class SimpleFacerec:
    def __init__(self, model_path):
        self.known_face_encodings = []
        self.known_face_names = []
        self.frame_resizing = 0.25
        self.detector = MTCNN()
        self.model = load_model(model_path)

    def load_encoding_images(self, images_path):
        images_path = glob.glob(os.path.join(images_path, "*.*"))
        print("{} encoding images found.".format(len(images_path)))

        for img_path in images_path:
            img = self.load_image(img_path)
            face_encoding = self.get_face_encoding(img)
            if face_encoding is not None:
                basename = os.path.basename(img_path)
                (filename, ext) = os.path.splitext(basename)
                self.known_face_encodings.append(face_encoding)
                self.known_face_names.append(filename)
        print("Encoding images loaded")

    def load_image(self, file_path):
        img = tf.keras.preprocessing.image.load_img(file_path, target_size=(160, 160))
        img = tf.keras.preprocessing.image.img_to_array(img)
        img = np.expand_dims(img, axis=0)
        img = tf.keras.applications.resnet50.preprocess_input(img)
        return img

    def get_face_encoding(self, img):
        faces = self.detector.detect_faces(img[0])
        if faces:
            face = faces[0]
            x, y, width, height = face['box']
            face_img = img[0][y:y+height, x:x+width]
            face_img = tf.image.resize(face_img, (160, 160))
            face_img = tf.expand_dims(face_img, axis=0)
            face_encoding = self.model.predict(face_img)
            return face_encoding[0]
        return None

    def detect_known_faces(self, frame):
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        small_frame = cv2.resize(rgb_frame, (0, 0), fx=self.frame_resizing, fy=self.frame_resizing)
        faces = self.detector.detect_faces(small_frame)
        face_encodings = [self.get_face_encoding(np.expand_dims(small_frame, axis=0)) for face in faces]

        face_names = []
        face_matches = []
        for face_encoding in face_encodings:
            if face_encoding is not None:
                matches = self.compare_faces(self.known_face_encodings, face_encoding)
                name = "Unknown"
                match = False
                if True in matches:
                    best_match_index = np.argmin(matches)
                    name = self.known_face_names[best_match_index]
                    match = True
                face_names.append(name)
                face_matches.append(match)

        face_locations = [face['box'] for face in faces]
        face_locations = np.array(face_locations)
        face_locations = face_locations / self.frame_resizing
        return face_locations.astype(int), face_names, face_matches

    def compare_faces(self, known_face_encodings, face_encoding):
        distances = np.linalg.norm(known_face_encodings - face_encoding, axis=1)
        return distances

# Example usage
sfr = SimpleFacerec("facenet_keras.h5")
sfr.load_encoding_images("images/")
frame = cv2.imread("test_image.jpg")
face_locations, face_names, face_matches = sfr.detect_known_faces(frame)

for (x, y, w, h), name in zip(face_locations, face_names):
    if name != "Unknown":
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(frame, name, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    else:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 2)
        cv2.putText(frame, name, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

cv2.imshow("Frame", frame)
cv2.waitKey(0)
cv2.destroyAllWindows()
